name: Release

on:
  release:
    types: [ published ]
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the Git Repository
        uses: actions/checkout@v2

      - name: Install Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          server-id: 'github'

      - name: Set the current release version
        id: release_version
        run: echo ::set-output name=release_version::${GITHUB_REF:11}

      - name: Setup git
        env:
          INGESTR_BUILD_EMAIL: ${{ secrets.INGESTR_BUILD_EMAIL }}
        run: |
          git config --global user.email "$INGESTR_BUILD_EMAIL"
          git config --global user.name "ingestr-build"
          git fetch
          git checkout master
          git tag -d v${{ steps.release_version.outputs.release_version }}
          git push origin :refs/tags/v${{ steps.release_version.outputs.release_version }}

      - name: Figure out next version
        id: next_version
        run: |
          wget -q https://raw.githubusercontent.com/micronaut-projects/github-actions/master/post-release/increment_version.sh -O /tmp/iv.sh
          chmod +x /tmp/iv.sh
          NV=`/tmp/iv.sh -p ${{ steps.release_version.outputs.release_version }}`
          echo ::set-output name=next_version::${NV}-SNAPSHOT

      - name: Prepare release
        run: mvn --batch-mode release:prepare -DreleaseVersion=${{ steps.release_version.outputs.release_version }} -Dtag=v${{ steps.release_version.outputs.release_version }} -DdevelopmentVersion=${{ steps.next_version.outputs.next_version }} -Pgithub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Perform release
        run: mvn --batch-mode release:perform -Pgithub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish package
        if: success()
        run: mvn --batch-mode deploy -Pgithub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Close release
        if: success()
        run: |
          release_url=`cat $GITHUB_EVENT_PATH | jq '.release.url' | sed -e 's/^"\(.*\)"$/\1/g'`
          echo $release_url
          curl -s --request PATCH -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" $release_url --data "{\"draft\": false}"

      - name: Rollback release
        if: failure()
        run: mvn release:rollback -Pgithub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}